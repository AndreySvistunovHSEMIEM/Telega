from src.InitBot import *
from src.InitGigaChat import *
from aiogram import Router, types
from gigachat.models import Chat, Messages, MessagesRole
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from src.DataBase import *
from src.LogInLogOutClasses import *
import bcrypt
from src.Constants import CONTENT
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging

router = Router()

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º üí™", callback_data="exercises")],
        [InlineKeyboardButton(text="–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üí≠", callback_data="motivation")],
        [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ GigaChat ü§ñ", callback_data="gigachat")]
    ])


def main_reply_menu():
    return ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º üí™"),
            KeyboardButton(text="–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üí≠")
        ],
        [
            KeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ GigaChat ü§ñ")
        ]
    ], resize_keyboard=True, one_time_keyboard=False)


@router.message(Command("menu"))
async def menu_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_reply_menu())


@router.message(Command("start"))
async def start_command(message: types.Message, is_registered: bool, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üë§", callback_data="register")],
        [InlineKeyboardButton(text="–í–æ–π—Ç–∏ üîë", callback_data="login")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.message(Command("info"))
async def info_command(message: types.Message):
    info_text = (
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: ü§ñ\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏.\n"
        "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
        "\t- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úçÔ∏è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\n"
        "\t- –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üìã –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º\n"
        "\t- –ü–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üí™\n"
        "\t- –û–±—â–∞—Ç—å—Å—è üí¨ —Å GigaChat –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã"
    )
    await message.answer(info_text)

@router.message(Command("my_info"))
async def my_info_command(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("rehab_bot.db") as db:
        user_data = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = await user_data.fetchone()

    if user_data:
        _, username, _, full_name, injury_type, age, height, weight = user_data
        user_info_text = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"- –õ–æ–≥–∏–Ω: {username}\n"
            f"- –ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\n"
            f"- –¢–∏–ø —Ç—Ä–∞–≤–º—ã: {injury_type}\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
            f"- –†–æ—Å—Ç: {height} —Å–º\n"
            f"- –í–µ—Å: {weight} –∫–≥"
        )
        await message.answer(user_info_text)
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")


@router.callback_query(lambda c: c.data == "register")
async def register_user(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(Register.waiting_for_username)


@router.callback_query(lambda c: c.data == "login")
async def login_user(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(Login.waiting_for_username)


async def username_exists(username: str) -> bool:
    async with aiosqlite.connect("rehab_bot.db") as db:
        async with db.execute("SELECT 1 FROM users WHERE username = ?", (username,)) as cursor:
            return await cursor.fetchone() is not None


@router.message(Register.waiting_for_username)
async def ask_username_for_registration(message: types.Message, state: FSMContext):
    username = message.text
    if await username_exists(username):
        await message.answer("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    await state.update_data(username=username)
    await state.set_state(Register.waiting_for_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@router.message(Register.waiting_for_password)
async def ask_password_for_registration(message: types.Message, state: FSMContext):
    password_hash = bcrypt.hashpw(message.text.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    await state.update_data(password=password_hash)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Register.waiting_for_name)


@router.message(Register.waiting_for_name)
async def ask_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∏–ø —Ç—Ä–∞–≤–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–ª–æ–º, —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ):")
    await state.set_state(Register.waiting_for_injury_type)


@router.message(Register.waiting_for_injury_type)
async def ask_injury_type(message: types.Message, state: FSMContext):
    await state.update_data(injury_type=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(Register.waiting_for_age)


@router.message(Register.waiting_for_age)
async def ask_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (10 <= int(message.text) <= 100):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç).")
        return

    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:")
    await state.set_state(Register.waiting_for_height)


@router.message(Register.waiting_for_height)
async def ask_height(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (120 <= int(message.text) <= 230):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º.")
        return

    await state.update_data(height=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
    await state.set_state(Register.waiting_for_weight)


@router.message(Register.waiting_for_weight)
async def ask_weight(message: types.Message, state: FSMContext):
    if not message.text.replace('.', '', 1).isdigit() or not (35 <= float(message.text) <= 230):  # Allow decimal values
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥.")
        return

    await state.update_data(weight=float(message.text))
    user_data = await state.get_data()
    user_id = message.from_user.id
    username = user_data["username"]

    # Save to database
    try:
        async with aiosqlite.connect("rehab_bot.db") as db:
            await db.execute(
                '''INSERT INTO users (user_id, username, password, full_name, injury_type, age, height, weight) 
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                (user_id, username, user_data["password"], user_data["full_name"], user_data["injury_type"],
                 user_data["age"], user_data["height"], user_data["weight"])
            )
            await db.commit()

        await state.set_state(Register.completed)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=main_menu()  # Inline keyboard
        )
    except aiosqlite.IntegrityError:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")


@router.message(Login.waiting_for_username)
async def ask_username_for_login(message: types.Message, state: FSMContext):
    username = message.text
    await state.update_data(username=username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(Login.waiting_for_password)

# FSM Survey: Entering password for login
@router.message(Login.waiting_for_password)
async def ask_password_for_login(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    username = user_data["username"]

    async with aiosqlite.connect("rehab_bot.db") as db:
        async with db.execute("SELECT password FROM users WHERE username = ?", (username,)) as cursor:
            user_record = await cursor.fetchone()

    if user_record and bcrypt.checkpw(message.text.encode('utf-8'), user_record[0].encode('utf-8')):
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!", reply_markup=main_reply_menu())
        await state.set_state(Login.completed)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(Login.waiting_for_username)


@router.message(lambda message: True)
async def handle_free_text_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.content_type == types.ContentType.TEXT:
        text = message.text.strip()

        async with aiosqlite.connect("rehab_bot.db") as db:
            user_data = await db.execute("SELECT full_name, injury_type, height, weight FROM users WHERE user_id = ?",
                                         (user_id,))
            user_data = await user_data.fetchone()

        if user_data:
            full_name, injury_type, height, weight = user_data
            payload = Chat(
                messages=[
                    Messages(role=MessagesRole.SYSTEM, content=CONTENT),
                    Messages(role=MessagesRole.USER, content=f"{full_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {text}. "
                                                             f"–†–æ—Å—Ç: {height} —Å–º, –í–µ—Å: {weight} –∫–≥.")
                ],
                temperature=0.7,
                max_tokens=1000
            )
            response = gigachat.chat(payload)
            await message.answer(response.choices[0].message.content)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")
    else:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —á–µ–º-–ª–∏–±–æ, –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")


@router.message()
async def handle_other_message(message: types.Message):
    if message.content_type in {types.ContentType.STICKER, types.ContentType.VOICE, types.ContentType.VIDEO,
                                types.ContentType.PHOTO}:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")


@router.callback_query(lambda c: c.data == "exercises")
async def send_exercise_recommendation(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    async with aiosqlite.connect("rehab_bot.db") as db:
        user = await db.execute("SELECT full_name, injury_type, height, weight FROM users WHERE user_id = ?",
                                (user_id,))
        user_data = await user.fetchone()

    if user_data:
        full_name, injury_type, height, weight = user_data
        await callback_query.message.answer(
            f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ GigaChat:\n"
            f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –¥–ª—è {full_name}, "
            f"–∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ç—Ä–∞–≤–º—É: {injury_type}. –†–æ—Å—Ç: {height} —Å–º, –í–µ—Å: {weight} –∫–≥."
        )
        payload = Chat(
            messages=[
                Messages(role=MessagesRole.SYSTEM, content=CONTENT),
                Messages(role=MessagesRole.USER, content=f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –¥–ª—è {full_name}, "
                                                         f"–∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ç—Ä–∞–≤–º—É: {injury_type}. –†–æ—Å—Ç: {height} —Å–º, –í–µ—Å: {weight} –∫–≥.")
            ],
            temperature=0.7,
            max_tokens=1000
        )
        response = gigachat.chat(payload)
        await callback_query.message.answer(response.choices[0].message.content)
    else:
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")


@router.callback_query(lambda c: c.data == "motivation")
async def send_motivation(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    async with aiosqlite.connect("rehab_bot.db") as db:
        user_data = await db.execute("SELECT full_name, height, weight FROM users WHERE user_id = ?", (user_id,))
        user_data = await user_data.fetchone()

    full_name = user_data[0] if user_data else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    height = user_data[1] if user_data else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    weight = user_data[2] if user_data else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # Create payload for GigaChat
    payload = Chat(
        messages=[
            Messages(role=MessagesRole.SYSTEM, content=CONTENT),
            Messages(role=MessagesRole.USER, content=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {full_name}. –†–æ—Å—Ç: {height} —Å–º, –í–µ—Å: {weight} –∫–≥.")
        ],
        temperature=0.7,
        max_tokens=1000
    )

    # Call GigaChat
    response = gigachat.chat(payload)
    await callback_query.message.answer(response.choices[0].message.content)

async def log_user_action(user_id: int, action: str):
    async with aiosqlite.connect("rehab_bot.db") as db:
        await db.execute("INSERT INTO user_actions (user_id, action) VALUES (?, ?)", (user_id, action))
        await db.commit()

@router.callback_query(lambda c: c.data == "gigachat")
async def start_gigachat(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å GigaChat –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–∏—à–∏—Ç–µ –Ω–∏–∂–µ:")
    await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

    @dp.message(lambda message: message.from_user.id == callback_query.from_user.id)
    async def handle_gigachat_message(message: types.Message):
        if message.text.lower() == "–ø–æ–∫–∞":
            await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!")
            return

        user_id = message.from_user.id
        action_text = f"–ó–∞–ø—Ä–æ—Å: {message.text}"
        await log_user_action(user_id, action_text)
        async with aiosqlite.connect("rehab_bot.db") as db:
            user_data = await db.execute("SELECT full_name, height, weight FROM users WHERE user_id = ?", (user_id,))
            user_data = await user_data.fetchone()
            full_name = user_data[0] if user_data else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            height = user_data[1] if user_data else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            weight = user_data[2] if user_data else "–Ω–µ —É–∫–∞–∑–∞–Ω"

        payload = Chat(
            messages=[
                Messages(role=MessagesRole.SYSTEM, content=CONTENT),
                Messages(role=MessagesRole.USER, content=f"{full_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {message.text}. "
                                                         f"–†–æ—Å—Ç: {height} —Å–º, –í–µ—Å: {weight} –∫–≥.")
            ],
            temperature=0.7,
            max_tokens=1000
        )
        response = gigachat.chat(payload)
        await message.answer(response.choices[0].message.content)

scheduler = AsyncIOScheduler()

async def health_check():
    async with aiosqlite.connect("rehab_bot.db") as db:
        cursor = await db.execute("SELECT user_id FROM users")
        user_ids = await cursor.fetchall()

    for user_id in user_ids:
        try:
            await bot.send_message(user_id[0], "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ:")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")

@router.message(lambda message: True)
async def handle_health_response(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    async with aiosqlite.connect("rehab_bot.db") as db:
        user_data = await db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
        user_data = await user_data.fetchone()

    if user_data:
        health_status = message.text.strip()
        async with aiosqlite.connect("rehab_bot.db") as db:
            await db.execute("INSERT INTO user_health (user_id, health_status) VALUES (?, ?)", (user_id, health_status))
            await db.commit()
            action = f"–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏: {health_status}"
            await db.execute("INSERT INTO user_actions (user_id, action) VALUES (?, ?)", (user_id, action))
            await db.commit()

            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ–ø—Ä–æ—Å–µ.")


@scheduler.scheduled_job("interval", minutes=10)
async def scheduled_health_check():
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–ø—Ä–æ—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.")
    await health_check()


@scheduler.scheduled_job("interval",  minutes=5)
async def daily_reminder():
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è daily_reminder")
    async with aiosqlite.connect("rehab_bot.db") as db:
        cursor = await db.execute("SELECT user_id FROM users")
        user_ids = await cursor.fetchall()
        if not user_ids:
            logging.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return
        for user_id in user_ids:
            try:
                await bot.send_message(user_id[0], "–≠—Ç–æ –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö!\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö/—Ä–µ–∑—É–ª—Ç–∞—Ç–∞—Ö!")
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")

